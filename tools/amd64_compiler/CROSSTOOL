major_version: "local"
minor_version: ""
default_target_cpu: "amd64"

default_toolchain {
  cpu: "amd64"
  toolchain_identifier: "gcc_linux_amd64"
}

default_toolchain {
  cpu: "amd64_bootlin"
  toolchain_identifier: "gcc_linux_amd64_bootlin"
}

default_toolchain {
  cpu: "k8"
  toolchain_identifier: "local"
}
toolchain {
  toolchain_identifier: "gcc_linux_amd64"
  abi_version: "gcc"
  abi_libc_version: "glibc_2.27"
  builtin_sysroot: ""
  compiler: "gcc"
  host_system_name: "amd64"
  needsPic: true
  supports_gold_linker: true
  supports_incremental_linker: false
  supports_fission: false
  supports_interface_shared_objects: false
  supports_normalizing_ar: false
  supports_start_end_lib: true
  supports_thin_archives: true
  target_libc: "glibc_2.27"
  target_cpu: "amd64"
  target_system_name: "amd64"

  tool_path { name: "ar" path: "x86_64-unknown-linux-gnu/x86_64-unknown-linux-gnu-ar" }
  tool_path { name: "compat-ld" path: "x86_64-unknown-linux-gnu/x86_64-unknown-linux-gnu-ld" }
  tool_path { name: "cpp" path: "x86_64-unknown-linux-gnu/x86_64-unknown-linux-gnu-gcc" }
  tool_path { name: "dwp" path: "x86_64-unknown-linux-gnu/x86_64-unknown-linux-gnu-dwp" }
  tool_path { name: "gcc" path: "x86_64-unknown-linux-gnu/x86_64-unknown-linux-gnu-gcc" }
  tool_path { name: "gcov" path: "x86_64-unknown-linux-gnu/x86_64-unknown-linux-gnu-gcov" }
  # C(++) compiles invoke the compiler (as that is the one knowing where
  # to find libraries), but we provide LD so other rules can invoke the linker.
  tool_path { name: "ld" path: "x86_64-unknown-linux-gnu/x86_64-unknown-linux-gnu-ld" }
  tool_path { name: "nm" path: "x86_64-unknown-linux-gnu/x86_64-unknown-linux-gnu-nm" }
  tool_path { name: "objcopy" path: "x86_64-unknown-linux-gnu/x86_64-unknown-linux-gnu-objcopy" }
  objcopy_embed_flag: "-I"
  objcopy_embed_flag: "binary"
  tool_path { name: "objdump" path: "x86_64-unknown-linux-gnu/x86_64-unknown-linux-gnu-objdump" }
  tool_path { name: "strip" path: "x86_64-unknown-linux-gnu/x86_64-unknown-linux-gnu-strip" }

  compiler_flag: "--sysroot=external/x86_64_unknown_linux_gnu_gcc_730/x86_64-unknown-linux-gnu/sysroot"

  cxx_flag: "-std=gnu++14"

  compiler_flag: "-nostdinc"

  # on the gcc command line, c++ header dirs must come first
  # however, compiler_flag entries are inserted and then cxx_flag entries. if c headers are in compiler_flag and
  # c++ in cxx_flag, the result is that the c header dirs are searched before a c++ header (cmath) is found. when
  # it include_next's math.h, the already-searched dirs are skipped. any c header locations included as part of
  # cxx_flag's are discarded as duplicates, so (it seems) the only way to make it work is to only use compiler_flag
  # for include dirs, and not cxx_flag.

  # default paths are output from the following:
  # cpp -x c++ -v /dev/null -o /dev/null
  # cpp -v /dev/null -o /dev/null

  compiler_flag: "-isystem"
  compiler_flag: "external/x86_64_unknown_linux_gnu_gcc_730/x86_64-unknown-linux-gnu/include/c++/7.3.0"
  compiler_flag: "-isystem"
  compiler_flag: "external/x86_64_unknown_linux_gnu_gcc_730/x86_64-unknown-linux-gnu/include/c++/7.3.0/x86_64-unknown-linux-gnu"
  compiler_flag: "-isystem"
  compiler_flag: "external/x86_64_unknown_linux_gnu_gcc_730/x86_64-unknown-linux-gnu/include/c++/7.3.0/backward"
  compiler_flag: "-isystem"
  compiler_flag: "external/x86_64_unknown_linux_gnu_gcc_730/lib/gcc/x86_64-unknown-linux-gnu/7.3.0/include"
  compiler_flag: "-isystem"
  compiler_flag: "external/x86_64_unknown_linux_gnu_gcc_730/lib/gcc/x86_64-unknown-linux-gnu/7.3.0/include-fixed"
  compiler_flag: "-isystem"
  compiler_flag: "external/x86_64_unknown_linux_gnu_gcc_730/x86_64-unknown-linux-gnu/include"
  compiler_flag: "-isystem"
  compiler_flag: "external/x86_64_unknown_linux_gnu_gcc_730/x86_64-unknown-linux-gnu/sysroot/usr/include"


  cxx_builtin_include_directory: "%package(@x86_64_unknown_linux_gnu_gcc_730//x86_64-unknown-linux-gnu/include)%"
  cxx_builtin_include_directory: "%package(@x86_64_unknown_linux_gnu_gcc_730//x86_64-unknown-linux-gnu/include)%/c++/7.3.0"
  cxx_builtin_include_directory: "%package(@x86_64_unknown_linux_gnu_gcc_730//x86_64-unknown-linux-gnu/include)%/c++/7.3.0/backward"
  cxx_builtin_include_directory: "%package(@x86_64_unknown_linux_gnu_gcc_730//x86_64-unknown-linux-gnu/include)%/c++/7.3.0/x86_64-unknown-linux-gnu"
  cxx_builtin_include_directory: "%package(@x86_64_unknown_linux_gnu_gcc_730//include)%"
  cxx_builtin_include_directory: "%package(@x86_64_unknown_linux_gnu_gcc_730//x86_64-unknown-linux-gnu/sysroot/usr/include)%"
  cxx_builtin_include_directory: "%package(@x86_64_unknown_linux_gnu_gcc_730//lib/gcc/x86_64-unknown-linux-gnu/7.3.0/include)%"
  cxx_builtin_include_directory: "%package(@x86_64_unknown_linux_gnu_gcc_730//lib/gcc/x86_64-unknown-linux-gnu/7.3.0/include-fixed)%"

  linker_flag: "--sysroot=external/x86_64_unknown_linux_gnu_gcc_730/x86_64-unknown-linux-gnu/sysroot"
  linker_flag: "-lstdc++"
  linker_flag: "-latomic"
  linker_flag: "-lm"
  linker_flag: "-lpthread"
  linker_flag: "-Lexternal/x86_64_unknown_linux_gnu_gcc_730/libexec/gcc/x86_64-unknown-linux-gnu/7.3.0/"
  linker_flag: "-Lexternal/x86_64_unknown_linux_gnu_gcc_730/lib"
  linker_flag: "-Lexternal/x86_64_unknown_linux_gnu_gcc_730/x86_64-unknown-linux-gnu/sysroot/lib"
  linker_flag: "-Lexternal/x86_64_unknown_linux_gnu_gcc_730/x86_64-unknown-linux-gnu/sysroot/usr/lib"
  linker_flag: "-Bexternal/x86_64_unknown_linux_gnu_gcc_730/bin"
  #linker_flag: "-Wl,--dynamic-linker=/lib/ld-linux-armhf.so.3"
  linker_flag: "-fuse-ld=gold"
  linker_flag: "-Wl,-no-as-needed"
  linker_flag: "-Wl,-z,relro,-z,now"

  # Anticipated future default.
  # This makes GCC and Clang do what we want when called through symlinks.
  unfiltered_cxx_flag: "-no-canonical-prefixes"
  linker_flag: "-no-canonical-prefixes"

  # Make C++ compilation deterministic. Use linkstamping instead of these
  # compiler symbols.
  unfiltered_cxx_flag: "-Wno-builtin-macro-redefined"
  unfiltered_cxx_flag: "-D__DATE__=\"redacted\""
  unfiltered_cxx_flag: "-D__TIMESTAMP__=\"redacted\""
  unfiltered_cxx_flag: "-D__TIME__=\"redacted\""

  # Security hardening on by default.
  # Conservative choice; -D_FORTIFY_SOURCE=2 may be unsafe in some cases.
  # We need to undef it before redefining it as some distributions now have
  # it enabled by default.
  compiler_flag: "-U_FORTIFY_SOURCE"
  compiler_flag: "-fstack-protector"
  compiler_flag: "-fPIE"
  linker_flag: "-pie"
  linker_flag: "-Wl,-z,relro,-z,now"

  # Enable coloring even if there's no attached terminal. Bazel removes the
  # escape sequences if --nocolor is specified.
  compiler_flag: "-fdiagnostics-color=always"

  # All warnings are enabled. Maybe enable -Werror as well?
  compiler_flag: "-Wall"
  # Enable a few more warnings that aren't part of -Wall.
  compiler_flag: "-Wunused-but-set-parameter"
  # But disable some that are problematic.
  compiler_flag: "-Wno-free-nonheap-object" # has false positives

  # Keep stack frames for debugging, even in opt mode.
  compiler_flag: "-fno-omit-frame-pointer"

  compilation_mode_flags {
    mode: DBG
    # Enable debug symbols.
    compiler_flag: "-g"
  }
  compilation_mode_flags {
    mode: OPT
    # No debug symbols.
    # Maybe we should enable https://gcc.gnu.org/wiki/DebugFission for opt or
    # even generally? However, that can't happen here, as it requires special
    # handling in Bazel.
    compiler_flag: "-g0"

    # Conservative choice for -O
    # -O3 can increase binary size and even slow down the resulting binaries.
    # Profile first and / or use FDO if you need better performance than this.
    compiler_flag: "-O2"

    # Disable assertions
    compiler_flag: "-DNDEBUG"

    # Removal of unused code and data at link time (can this increase binary size in some cases?).
    compiler_flag: "-ffunction-sections"
    compiler_flag: "-fdata-sections"
    linker_flag: "-Wl,--gc-sections"
  }
}

toolchain {
  toolchain_identifier: "gcc_linux_amd64_bootlin"
  abi_version: "gcc"
  abi_libc_version: "glibc_2.27"
  builtin_sysroot: ""
  compiler: "gcc"
  host_system_name: "amd64"
  needsPic: true
  supports_gold_linker: true
  supports_incremental_linker: false
  supports_fission: false
  supports_interface_shared_objects: false
  supports_normalizing_ar: false
  supports_start_end_lib: true
  supports_thin_archives: true
  target_libc: "glibc_2.27"
  target_cpu: "amd64"
  target_system_name: "amd64"

  tool_path { name: "ar" path: "bootlin_linux_gcc/x86_64-linux-ar" }
  tool_path { name: "compat-ld" path: "bootlin_linux_gcc/x86_64-linux-ld" }
  tool_path { name: "cpp" path: "bootlin_linux_gcc/x86_64-linux-gcc" }
  tool_path { name: "dwp" path: "bootlin_linux_gcc/x86_64-linux-dwp" }
  tool_path { name: "gcc" path: "bootlin_linux_gcc/x86_64-linux-gcc" }
  tool_path { name: "gcov" path: "bootlin_linux_gcc/x86_64-linux-gcov" }
  # C(++) compiles invoke the compiler (as that is the one knowing where
  # to find libraries), but we provide LD so other rules can invoke the linker.
  tool_path { name: "ld" path: "bootlin_linux_gcc/x86_64-linux-ld" }
  tool_path { name: "nm" path: "bootlin_linux_gcc/x86_64-linux-nm" }
  tool_path { name: "objcopy" path: "bootlin_linux_gcc/x86_64-linux-objcopy" }
  objcopy_embed_flag: "-I"
  objcopy_embed_flag: "binary"
  tool_path { name: "objdump" path: "bootlin_linux_gcc/x86_64-linux-objdump" }
  tool_path { name: "strip" path: "bootlin_linux_gcc/x86_64-linux-strip" }

  compiler_flag: "--sysroot=external/com_bootlin_toolchains_gcc_7_3_0/x86_64-buildroot-linux-gnu/sysroot"

  cxx_flag: "-std=gnu++14"

  compiler_flag: "-nostdinc"

  # on the gcc command line, c++ header dirs must come first
  # however, compiler_flag entries are inserted and then cxx_flag entries. if c headers are in compiler_flag and
  # c++ in cxx_flag, the result is that the c header dirs are searched before a c++ header (cmath) is found. when
  # it include_next's math.h, the already-searched dirs are skipped. any c header locations included as part of
  # cxx_flag's are discarded as duplicates, so (it seems) the only way to make it work is to only use compiler_flag
  # for include dirs, and not cxx_flag.

  # default paths are output from the following:
  # cpp -x c++ -v /dev/null -o /dev/null
  # cpp -v /dev/null -o /dev/null

  compiler_flag: "-isystem"
  compiler_flag: "external/com_bootlin_toolchains_gcc_7_3_0/x86_64-buildroot-linux-gnu/include/c++/7.3.0"
  compiler_flag: "-isystem"
  compiler_flag: "external/com_bootlin_toolchains_gcc_7_3_0/x86_64-buildroot-linux-gnu/include/c++/7.3.0/x86_64-buildroot-linux-gnu"
  compiler_flag: "-isystem"
  compiler_flag: "external/com_bootlin_toolchains_gcc_7_3_0/x86_64-buildroot-linux-gnu/include/c++/7.3.0/backward"
  compiler_flag: "-isystem"
  compiler_flag: "external/com_bootlin_toolchains_gcc_7_3_0/lib/gcc/x86_64-buildroot-linux-gnu/7.3.0/include"
  compiler_flag: "-isystem"
  compiler_flag: "external/com_bootlin_toolchains_gcc_7_3_0/lib/gcc/x86_64-buildroot-linux-gnu/7.3.0/include-fixed"
  compiler_flag: "-isystem"
  compiler_flag: "external/com_bootlin_toolchains_gcc_7_3_0/x86_64-buildroot-linux-gnu/include"
  compiler_flag: "-isystem"
  compiler_flag: "external/com_bootlin_toolchains_gcc_7_3_0/x86_64-buildroot-linux-gnu/sysroot/usr/include"


  cxx_builtin_include_directory: "%package(@com_bootlin_toolchains_gcc_7_3_0//x86_64-buildroot-linux-gnu/include)%"
  cxx_builtin_include_directory: "%package(@com_bootlin_toolchains_gcc_7_3_0//x86_64-buildroot-linux-gnu/include)%/c++/7.3.0"
  cxx_builtin_include_directory: "%package(@com_bootlin_toolchains_gcc_7_3_0//x86_64-buildroot-linux-gnu/include)%/c++/7.3.0/backward"
  cxx_builtin_include_directory: "%package(@com_bootlin_toolchains_gcc_7_3_0//x86_64-buildroot-linux-gnu/include)%/c++/7.3.0/x86_64-buildroot-linux-gnu"

  cxx_builtin_include_directory: "%package(@com_bootlin_toolchains_gcc_7_3_0//include)%"
  cxx_builtin_include_directory: "%package(@com_bootlin_toolchains_gcc_7_3_0//x86_64-buildroot-linux-gnu/sysroot/usr/include)%"
  cxx_builtin_include_directory: "%package(@com_bootlin_toolchains_gcc_7_3_0//x86_64-buildroot-linux-gnu/sysroot/usr/lib/include)%"
  cxx_builtin_include_directory: "%package(@com_bootlin_toolchains_gcc_7_3_0//x86_64-buildroot-linux-gnu/sysroot/lib/gcc/x86_64-buildroot-linux-gnu/7.3.0/include-fixed)%"
  cxx_builtin_include_directory: "%package(@com_bootlin_toolchains_gcc_7_3_0//x86_64-buildroot-linux-gnu/sysroot/lib/gcc/x86_64-buildroot-linux-gnu/7.3.0/include)%"
  cxx_builtin_include_directory: "%package(@com_bootlin_toolchains_gcc_7_3_0//x86_64-buildroot-linux-gnu/sysroot/lib/gcc/x86_64-buildroot-linux-gnu/7.3.0/include-fixed)%"
  cxx_builtin_include_directory: "%package(@com_bootlin_toolchains_gcc_7_3_0//lib/gcc/x86_64-buildroot-linux-gnu/7.3.0/include)%"
  cxx_builtin_include_directory: "%package(@com_bootlin_toolchains_gcc_7_3_0//lib/gcc/x86_64-buildroot-linux-gnu/7.3.0/include-fixed)%"

  linker_flag: "--sysroot=external/com_bootlin_toolchains_gcc_7_3_0/x86_64-buildroot-linux-gnu/sysroot"
  linker_flag: "-lstdc++"
  linker_flag: "-latomic"
  linker_flag: "-lm"
  linker_flag: "-lpthread"
  linker_flag: "-Lexternal/com_bootlin_toolchains_gcc_7_3_0/libexec/gcc/x86_64-buildroot-linux-gnu/7.3.0/"
  linker_flag: "-Lexternal/com_bootlin_toolchains_gcc_7_3_0/lib"
  linker_flag: "-Lexternal/com_bootlin_toolchains_gcc_7_3_0/x86_64-buildroot-linux-gnu/sysroot/lib"
  linker_flag: "-Lexternal/com_bootlin_toolchains_gcc_7_3_0/x86_64-buildroot-linux-gnu/sysroot/usr/lib"
  linker_flag: "-Bexternal/com_bootlin_toolchains_gcc_7_3_0/bin"
  #linker_flag: "-Wl,--dynamic-linker=/lib/ld-linux-armhf.so.3"
  linker_flag: "-fuse-ld=gold"
  linker_flag: "-Wl,-no-as-needed"
  linker_flag: "-Wl,-z,relro,-z,now"

  # Anticipated future default.
  # This makes GCC and Clang do what we want when called through symlinks.
  unfiltered_cxx_flag: "-no-canonical-prefixes"
  linker_flag: "-no-canonical-prefixes"

  # Make C++ compilation deterministic. Use linkstamping instead of these
  # compiler symbols.
  unfiltered_cxx_flag: "-Wno-builtin-macro-redefined"
  unfiltered_cxx_flag: "-D__DATE__=\"redacted\""
  unfiltered_cxx_flag: "-D__TIMESTAMP__=\"redacted\""
  unfiltered_cxx_flag: "-D__TIME__=\"redacted\""

  # Security hardening on by default.
  # Conservative choice; -D_FORTIFY_SOURCE=2 may be unsafe in some cases.
  # We need to undef it before redefining it as some distributions now have
  # it enabled by default.
  compiler_flag: "-U_FORTIFY_SOURCE"
  compiler_flag: "-fstack-protector"
  compiler_flag: "-fPIE"
  linker_flag: "-pie"
  linker_flag: "-Wl,-z,relro,-z,now"

  # Enable coloring even if there's no attached terminal. Bazel removes the
  # escape sequences if --nocolor is specified.
  compiler_flag: "-fdiagnostics-color=always"

  # All warnings are enabled. Maybe enable -Werror as well?
  compiler_flag: "-Wall"
  # Enable a few more warnings that aren't part of -Wall.
  compiler_flag: "-Wunused-but-set-parameter"
  # But disable some that are problematic.
  compiler_flag: "-Wno-free-nonheap-object" # has false positives

  # Keep stack frames for debugging, even in opt mode.
  compiler_flag: "-fno-omit-frame-pointer"

  compilation_mode_flags {
    mode: DBG
    # Enable debug symbols.
    compiler_flag: "-g"
  }
  compilation_mode_flags {
    mode: OPT
    # No debug symbols.
    # Maybe we should enable https://gcc.gnu.org/wiki/DebugFission for opt or
    # even generally? However, that can't happen here, as it requires special
    # handling in Bazel.
    compiler_flag: "-g0"

    # Conservative choice for -O
    # -O3 can increase binary size and even slow down the resulting binaries.
    # Profile first and / or use FDO if you need better performance than this.
    compiler_flag: "-O2"

    # Disable assertions
    compiler_flag: "-DNDEBUG"

    # Removal of unused code and data at link time (can this increase binary size in some cases?).
    compiler_flag: "-ffunction-sections"
    compiler_flag: "-fdata-sections"
    linker_flag: "-Wl,--gc-sections"
  }
}

toolchain {
  toolchain_identifier: "local"
  abi_libc_version: "local"
  abi_version: "local"
  builtin_sysroot: ""
  compiler: "compiler"
  compiler_flag: "-U_FORTIFY_SOURCE"
  compiler_flag: "-D_FORTIFY_SOURCE=2"
  compiler_flag: "-fstack-protector"
  compiler_flag: "-Wall"
  compiler_flag: "-Wl,-z,-relro,-z,now"
  compiler_flag: "-B/usr/bin"
  compiler_flag: "-B/usr/bin"
  compiler_flag: "-Wunused-but-set-parameter"
  compiler_flag: "-Wno-free-nonheap-object"
  compiler_flag: "-fno-omit-frame-pointer"
  cxx_builtin_include_directory: "/usr/include/c++/4.8"
  cxx_builtin_include_directory: "/usr/include/x86_64-linux-gnu/c++/4.8"
  cxx_builtin_include_directory: "/usr/include/c++/4.8/backward"
  cxx_builtin_include_directory: "/usr/lib/gcc/x86_64-linux-gnu/4.8/include"
  cxx_builtin_include_directory: "/usr/local/include"
  cxx_builtin_include_directory: "/usr/lib/gcc/x86_64-linux-gnu/4.8/include-fixed"
  cxx_builtin_include_directory: "/usr/include/x86_64-linux-gnu"
  cxx_builtin_include_directory: "/usr/include"
  cxx_flag: "-std=c++0x"
  host_system_name: "local"
  linker_flag: "-lstdc++"
  linker_flag: "-lm"
  linker_flag: "-Wl,-no-as-needed"
  linker_flag: "-B/usr/bin"
  linker_flag: "-B/usr/bin"
  linker_flag: "-pass-exit-codes"
  needsPic: true
  objcopy_embed_flag: "-I"
  objcopy_embed_flag: "binary"
  supports_fission: false
  supports_gold_linker: false
  supports_incremental_linker: false
  supports_interface_shared_objects: false
  supports_normalizing_ar: false
  supports_start_end_lib: false
  supports_thin_archives: false
  target_cpu: "k8"
  target_libc: "local"
  target_system_name: "local"
  unfiltered_cxx_flag: "-fno-canonical-system-headers"
  unfiltered_cxx_flag: "-Wno-builtin-macro-redefined"
  unfiltered_cxx_flag: "-D__DATE__=\"redacted\""
  unfiltered_cxx_flag: "-D__TIMESTAMP__=\"redacted\""
  unfiltered_cxx_flag: "-D__TIME__=\"redacted\""
  tool_path {name: "ar" path: "/usr/bin/ar" }
  tool_path {name: "cpp" path: "/usr/bin/cpp" }
  tool_path {name: "dwp" path: "/usr/bin/dwp" }
  tool_path {name: "gcc" path: "/usr/bin/gcc" }
  tool_path {name: "gcov" path: "/usr/bin/gcov" }
  tool_path {name: "ld" path: "/usr/bin/ld" }
  tool_path {name: "nm" path: "/usr/bin/nm" }
  tool_path {name: "objcopy" path: "/usr/bin/objcopy" }
  tool_path {name: "objdump" path: "/usr/bin/objdump" }
  tool_path {name: "strip" path: "/usr/bin/strip" }

  compilation_mode_flags {
    mode: DBG
    compiler_flag: "-g"
  }
  compilation_mode_flags {
    mode: OPT
    compiler_flag: "-g0"
    compiler_flag: "-O2"
    compiler_flag: "-DNDEBUG"
    compiler_flag: "-ffunction-sections"
    compiler_flag: "-fdata-sections"
    linker_flag: "-Wl,--gc-sections"
  }
  linking_mode_flags { mode: DYNAMIC }
}
